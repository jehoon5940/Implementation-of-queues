#include <stdio.h>
#include <stdlib.h>

// 이중 연결 리스트의 노드 구조체 정의
typedef struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
} Node;

// 데크 구조체 정의
typedef struct Deque {
    Node* front;
    Node* rear;
} Deque;

// 새로운 노드 생성 함수
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

// 데크 초기화 함수
Deque* initializeDeque() {
    Deque* deque = (Deque*)malloc(sizeof(Deque));
    deque->front = NULL;
    deque->rear = NULL;
    return deque;
}

// 데크의 앞쪽에 요소를 추가하는 함수
void insertFront(Deque* deque, int data) {
    Node* newNode = createNode(data);
    if (deque->front == NULL) {
        deque->front = newNode;
        deque->rear = newNode;
    } else {
        newNode->next = deque->front;
        deque->front->prev = newNode;
        deque->front = newNode;
    }
}

// 데크의 뒤쪽에 요소를 추가하는 함수
void insertRear(Deque* deque, int data) {
    Node* newNode = createNode(data);
    if (deque->rear == NULL) {
        deque->front = newNode;
        deque->rear = newNode;
    } else {
        newNode->prev = deque->rear;
        deque->rear->next = newNode;
        deque->rear = newNode;
    }
}

// 데크의 앞쪽에서 요소를 제거하는 함수
void deleteFront(Deque* deque) {
    if (deque->front == NULL) {
        printf("데크가 비어 있습니다.\n");
        return;
    }
    Node* temp = deque->front;
    deque->front = deque->front->next;
    if (deque->front == NULL) {
        deque->rear = NULL;
    } else {
        deque->front->prev = NULL;
    }
    free(temp);
}

// 데크의 뒤쪽에서 요소를 제거하는 함수
void deleteRear(Deque* deque) {
    if (deque->rear == NULL) {
        printf("데크가 비어 있습니다.\n");
        return;
    }
    Node* temp = deque->rear;
    deque->rear = deque->rear->prev;
    if (deque->rear == NULL) {
        deque->front = NULL;
    } else {
        deque->rear->next = NULL;
    }
    free(temp);
}

// 데크의 앞쪽 요소 출력 함수
void printFront(Deque* deque) {
    if (deque->front == NULL) {
        printf("데크가 비어 있습니다.\n");
        return;
    }
    printf("데크의 앞쪽 요소: %d\n", deque->front->data);
}

// 데크의 뒤쪽 요소 출력 함수
void printRear(Deque* deque) {
    if (deque->rear == NULL) {
        printf("데크가 비어 있습니다.\n");
        return;
    }
    printf("데크의 뒤쪽 요소: %d\n", deque->rear->data);
}

// 데크 내용 출력 함수
void printDeque(Deque* deque) {
    Node* current = deque->front;
    if (current == NULL) {
        printf("데크가 비어 있습니다.\n");
        return;
    }
    printf("데크 내용: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// 메모리 해제 함수
void destroyDeque(Deque* deque) {
    while (deque->front != NULL) {
        Node* temp = deque->front;
        deque->front = deque->front->next;
        free(temp);
    }
    free(deque);
}

int main() {
    Deque* deque = initializeDeque();

    insertFront(deque, 1);
    insertFront(deque, 2);
    insertRear(deque, 3);
    insertRear(deque, 4);

    printDeque(deque);

    printFront(deque);
    printRear(deque);

    deleteFront(deque);
    deleteRear(deque);

    printDeque(deque);

    destroyDeque(deque);

    return 0;
}
